package fr.ibformation.service;

import java.awt.Color;

import fr.ibformation.ihm.PionButton;

public class Puissance4Service {
	private int joueur = 1;
	private final int NBPIONSGAGNANTS = 4;
	int NBCOLONNE = 7;
	int NBLIGNE = 6;

	public Puissance4Service() {
		// TODO Auto-generated constructor stub
	}

	public Boolean PlacerPion(PionButton[][] cases, int colonne, int ligne) {
		Boolean pionPlace = false;
		for (int i = 0; i < 6; i++) {
			if (cases[colonne][i].getForeground() == Color.WHITE && pionPlace == false) {
				if (joueur == 1) {
					cases[colonne][i].setForeground(Color.YELLOW);

				} else {
					cases[colonne][i].setForeground(Color.RED);
				}

				pionPlace = true;
			}
		}
		/*
		 * if (pionPlace) { joueur = (joueur % 2) + 1; }
		 */
		return pionPlace;

	}

	/**
	 * @return the joueur
	 */
	public int getJoueur() {
		return joueur;
	}

	/**
	 * @param joueur the joueur to set
	 */
	public void setJoueur(int joueur) {
		this.joueur = joueur;
	}

	/**
	 * Prend le dernier joueur ayant joué, ainsi que les coordonnées du dernier
	 * coup. Vérifie si ce coup déclenche une victoire.
	 * 
	 * @param cases
	 * @param colonne
	 * @param ligne
	 * @return 0 si pas de victoire. 1 si joueur 1 gagne, 2 si joueur 2 gagne.
	 */
	public int VerifierVictoire(PionButton[][] cases, int colonne, int ligne) {
		System.out.println("verifiervitoire");
		String streak = "";
		for (int i = 0; i < this.NBPIONSGAGNANTS; i++) {
			streak += String.valueOf(joueur);
		}
		System.out.println("debut verifiervictoire" + streak);
		// Vérifier si la ligne contient quatre pions consécutifs du joueur
		System.out.println("ligne" + Ligne(cases, ligne));
		if (Ligne(cases, ligne).indexOf(streak) != -1) {
			return this.joueur;
		}
		// Vérifier si la colonne contient quatre pions consécutifs du joueur
		if (Colonne(cases, colonne).indexOf(streak) != -1) {
			return this.joueur;
		}
		// Vérifier si la diagonale slash (/) contient quatre pions consécutifs du
		// joueur
		if (DiagonaleSlash(cases, colonne, ligne).indexOf(streak) != -1) {
			return this.joueur;
		}
		// Vérifier si la diagonale antislash (/) contient quatre pions consécutifs du
		// joueur
		if (DiagonaleAntiSlash(cases, colonne, ligne).indexOf(streak) != -1) {
			return this.joueur;
		}
		System.out.println("fin de verifictoir");
		return 0;
	}

	/**
	 * DiagonaleAntiSlash(PionPanel[][] cases, int colonne, int ligne) permet de
	 * transformer en String la diagonale \ contenant la case sélectionnée. Elle
	 * renvoie un string qui est une suite de chiffre: 0 pour une case vide, 1 pour
	 * un pion jaune, 2 pour un pion rouge.
	 * 
	 * @param cases
	 * @param colonne
	 * @param ligne
	 * @return
	 */
	private String DiagonaleAntiSlash(PionButton[][] cases, int colonne, int ligne) {

		String diagonaleAntiSlash = "";
		int min = Math.min(this.NBCOLONNE - (colonne + 1), ligne);
		colonne += min;
		ligne -= min;
		while (colonne >= 0 && ligne < this.NBLIGNE) {
			diagonaleAntiSlash += cases[colonne][ligne].caseToString();
			colonne--;
			ligne++;
		}

		return diagonaleAntiSlash;

	}

	/**
	 * DiagonaleSlash(PionPanel[][] cases, int colonne, int ligne) permet de
	 * transformer en String la diagonale / contenant la case sélectionnée. Elle
	 * renvoie un string qui est une suite de chiffre: 0 pour une case vide, 1 pour
	 * un pion jaune, 2 pour un pion rouge.
	 * 
	 * @param cases
	 * @param colonne
	 * @param ligne
	 * @return
	 */
	private String DiagonaleSlash(PionButton[][] cases, int colonne, int ligne) {
		String diagonaleSlash = "";
		int min = Math.min(colonne, ligne);
		colonne -= min;
		ligne -= min;
		while (colonne < this.NBCOLONNE && ligne < this.NBLIGNE) {
			diagonaleSlash += cases[colonne][ligne].caseToString();
			colonne++;
			ligne++;
		}
		return diagonaleSlash;
	}

	/**
	 * Colonne(PionPanel[][] cases, int colonne) permet de transformer la colonne
	 * sélectionnée en string Elle renvoie un string qui est une suite de chiffre: 0
	 * pour une case vide, 1 pour un pion jaune, 2 pour un pion rouge.
	 * 
	 * @param cases
	 * @param colonne
	 * @return
	 */
	private String Colonne(PionButton[][] cases, int colonne) {
		String colonneString = "";
		for (int i = 0; i < this.NBLIGNE; i++) {
			colonneString += cases[colonne][i].caseToString();
		}
		return colonneString;

	}

	/**
	 * Colonne(PionPanel[][] cases, int ligne) permet de transformer la ligne
	 * sélectionnée en string Elle renvoie un string qui est une suite de chiffre: 0
	 * pour une case vide, 1 pour un pion jaune, 2 pour un pion rouge.
	 * 
	 * @param cases
	 * @param ligne
	 * @return
	 */
	private String Ligne(PionButton[][] cases, int ligne) {
		String ligneString = "";
		for (int i = 0; i < this.NBCOLONNE; i++) {
			ligneString += cases[i][ligne].caseToString();
		}
		return ligneString;
	}
	
	public void save(PionButton[][] cases) {
		
	}

}
